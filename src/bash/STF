#!/bin/bash
set -o pipefail

#const env var begin
export AUTOTEST_MSG_TOKEN="STF"
export AUTOTEST_OFFICIAL_USER="jenkins"
export AUTOTEST_BASE_DIR="/n/csf/auto"
export AUTOTEST_PARAMETER_DIR="/n/csf/CI/param/"
export AUTOTEST_FRAMEWORK_DOC="http://server.com/~gemfield/training/How_To_Write_CSF_Testcases_With_Jenkins.ppt"
export AUTOTEST_SSH_ARGS="-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oPasswordAuthentication=no -q"
export AUTOTEST_JENKINS_PUBKEY="/n/csf/tools/data/id_rsa.pub_jenkins_csfci"
FROM_EMAIL="gemfield@civilnet.cn"
CONST_MAX_CASE_NUM="99"
MAX_CASE_NUM="0"
CONST_MAX_GROUP_NUM="99"
CASE_PREFIX="s"
GROUP_PREFIX="g"
COMPANY_DOMAIN="UnKnownDomain"
export AUTOTEST_RCVCMD="/cs/sn/utest/rc/sendRC"
#const env var end
IN_ERROR_HANDLER="NO"
#check args here, and then args constitute the temporary const env var
ARG=$1
if [ $# -lt 1 ];then
    echo "$AUTOTEST_MSG_TOKEN ERROR: args not correct, Usage: $0 <DFT_SUBMODULE | UT_SUBMODULE | RT_SUBMODULE | CSF-SUBMODULE>"
    exit 1
else
    case $ARG in
        UT_*)
            AUTOTEST_TEST_KIND="UT"
            ;;
        DFT_*)
            AUTOTEST_TEST_KIND="DFT"
            ;;
        RT_*)
            AUTOTEST_TEST_KIND="RT"
            ;;
        CSF-*|CSF_*)
            AUTOTEST_TEST_KIND="CIT"
            ;;
        *)
            echo "$AUTOTEST_MSG_TOKEN ERROR: invalid argument: $ARG ."
            exit 1
            ;;
    esac
fi
export AUTOTEST_TMPEXEC="/tmp/${ARG}_AUTOTEST_TMPEXEC"
export AUTOTEST_ONLAB_PARAMETER_FILE="/tmp/${ARG}_AUTOTEST_ONLAB_PARAMETER_FILE"
export AUTOTEST_TMPRCV="/tmp/${ARG}_RCV"
export AUTOTEST_TMPLOADINFO="/tmp/$ARG.$USER.loadinfo"
export AUTOTEST_STDOUT_MONITOR="/tmp/AUTOTEST_STDOUT_MONITOR_$ARG.$$.log"

#check arg and constitute temporary const env var end

export AUTOTEST_TEST_KIND
SUBMODULE=${ARG#*[-_]}
export AUTOTEST_JENKINS_JOB="${AUTOTEST_TEST_KIND}_${SUBMODULE}"
export AUTOTEST_CASE_DIR="$AUTOTEST_BASE_DIR/$AUTOTEST_TEST_KIND"
export AUTOTEST_FRAMEWORK_DIR=$(cd `dirname $0`;echo $PWD)
export AUTOTEST_PARAMETER_FILE="$AUTOTEST_PARAMETER_DIR$AUTOTEST_JENKINS_JOB"
export AUTOTEST_MODULES_DIR="$AUTOTEST_FRAMEWORK_DIR/modules"
export AUTOTEST_PARAMETER_URL="http://server/~csfdev/csf/CI/param/index.php?${AUTOTEST_JENKINS_JOB}"
LIRT_PARAMETER_FILE="${AUTOTEST_FRAMEWORK_DIR}/config/AUTOTEST_${AUTOTEST_JENKINS_JOB}_PARAMETER"
export AUTOTEST_VARS_FILE="${AUTOTEST_FRAMEWORK_DIR}/config/AUTOTEST_${AUTOTEST_JENKINS_JOB}_VARS.$$"
trap clearTmpFiles EXIT

#function area begin
function clearTmpFiles
{
    if [ "$CHECK_KW_FLAG" == "TRUE" ];then
        TFnote "AUTOTEST_KW_HTML: $AUTOTEST_KW_HTML"
        TFnote "AUTOTEST_KW_URL: $AUTOTEST_KW_URL"
    fi
    #generate test report
    if [ "$CHECK_REPORT_FLAG" == "TRUE" ];then
        TFnote "prepare for the test report."
        TFnote "AUTOTEST_REPORT_HTML: $AUTOTEST_REPORT_HTML"
        TFnote "AUTOTEST_README_FILE: $AUTOTEST_README_FILE"
        TFnote "AUTOTEST_REPORT_FILE: $AUTOTEST_REPORT_FILE"
        TFnote "AUTOTEST_REPORT_TOOL: $AUTOTEST_MODULES_DIR/testReport"
        TFnote "AUTOTEST_REPORT_URL: $AUTOTEST_REPORT_URL"
        if [ "$CHECK_GCOV_FLAG" == "TRUE" ];then
            TFnote "AUTOTEST_GCOV_URL: $AUTOTEST_GCOV_URL"
        fi
        TFnote "Try to generate test report..."
        $AUTOTEST_MODULES_DIR/testReport
        if [ $? -eq 0 ];then
            tmpmsg="STF Generate test report successfully: $AUTOTEST_REPORT_URL"
            TFnote "$tmpmsg"
            TFmail $TO_EMAIL "$tmpmsg" $AUTOTEST_REPORT_FILE
        else
            tmpmsg="$AUTOTEST_MODULES_DIR/testReport failed with rc=$?"
            TFnote $tmpmsg
            TFmail $TO_EMAIL "$tmpmsg" $AUTOTEST_REPORT_FILE
        fi 
    else
        tmpmsg="STF Will not generate test report since no cases are performed."
        TFnote "$tmpmsg"
        TFmail $TO_EMAIL "$tmpmsg" "$tmpmsg"
    fi
    echo "-------------------------------------"
    if [ -z "$AUTOTEST_DEBUG" ];then
        rm -f $AUTOTEST_STDOUT_MONITOR 2>/dev/null
        rm -f $AUTOTEST_VARS_FILE 2>/dev/null
    else
        TFnote "You opened the debug mode."
        TFnote "Log: $AUTOTEST_STDOUT_MONITOR"
        TFnote "AUTOTEST_VARS_FILE: $AUTOTEST_VARS_FILE"
    fi
}
function missModules
{
    echo "builtin modules: local|build|buildserver|installspa|installconfig|installproc|deletespa|restartspa|rcvspa|rcvplat"
    extra_modules=$(cd $AUTOTEST_MODULES_DIR;ls *_exec_mo |awk -F '_' '{print $1}' |tr '\n' '|')
    echo "extra modules: $extra_modules"
}
#do not export contains
function contains
{
    string="$1"
    substring="$2"
    if test "${string#*$substring}" != "$string"
    then
        return 0    # $substring is in $string
    else
        return 1    # $substring is not in $string
    fi
}
function TFnote
{
    echo "$AUTOTEST_MSG_TOKEN NOTE: $1"
}
function TFwarning
{
    echo "$AUTOTEST_MSG_TOKEN Warning: $1"
}
function TFmoduleError
{
    echo "$AUTOTEST_MSG_TOKEN MODULE ERROR: $1"
    exit 1
}
function TFmoduleCheckRC
{
    rc=$1
    running=$2
    if [ $rc -ne 0 ];then
        echo "$AUTOTEST_MSG_TOKEN MODULE ERROR: $running failed with return value: $rc"
        exit 1
    fi
}

export -f missModules
export -f TFnote
export -f TFwarning
export -f TFmoduleError
export -f TFmoduleCheckRC

function TFmail
{
    TFnote "Prepare sending email."
    d_email=$1
    d_subject=$2
    d_content=$3
    [ -z "$d_email" ] && TFnote "TO_EMAIL not set in parameter file." && return
    [ -z "$d_subject" ] && TFnote "Email subject is empty." && return
    [ -z "$d_content" ] && TFnote "Email content is empty." && return
    
    which mail >/dev/null 2>&1
    [ $? -ne 0 ] && TFnote "no mail util found on current machine." && return
    
    TFnote "Will send email to $d_email"
    
    if [ -f "$d_content" ];then
        cat $d_content | mail -r $FROM_EMAIL -s "$d_subject" "$d_email"
    else
        echo "$d_content" | mail -r $FROM_EMAIL -s "$d_subject" "$d_email"
    fi
    [ $? -ne 0 ] && TFnote "Send email to $d_email failed."
}

ERROR_HANDLE="OFF"
function errorHandler
{
    IN_ERROR_HANDLER="YES"
    if [ ! -f "$AUTOTEST_CASE_NAME" ];then
        TFnote "no errorHandlers can handle case ($AUTOTEST_CASE_NAME)"
        return 0
    fi
    filename=$(basename "$AUTOTEST_CASE_NAME")
    if [ -z "$filename" ];then
        TFnote "no errorHandlers can handle case ($AUTOTEST_CASE_NAME)"
        return 0
    fi
    casekind=$(echo $filename |gawk -F '_' '{print $2}')
    if [ -z "$casekind" ];then
        TFerror "$AUTOTEST_CASE_NAME file name format error!"
    fi
    error_handler_name="${filename}_error_handler"
    error_handler_value=${!error_handler_name}
    if [ -z "$error_handler_value" ];then
        TFnote "You did not define error handler for $filename ($error_handler_name) in $AUTOTEST_PARAMETER_FILE"
        TFnote "Try to find kind handler..."
        error_handler_name="${casekind}_error_handler"
        error_handler_value=${!error_handler_name}
    fi

    if [ -z "$error_handler_value" ];then
        TFnote "You did not define error handler for $casekind ($error_handler_name) in $AUTOTEST_PARAMETER_FILE"
        return 0
    fi
    TFnote "Found error handler for $casekind ($error_handler_name)..."
    CASE_KIND=$(echo $error_handler_value |gawk -F '/' '{print $NF}' |gawk -F '_' '{print $2}')
    if [ -z "$CASE_KIND" ];then
        TFerror "$casekind handler $error_handler_value file name format error!"
    fi
    AUTOTEST_CASE_NAME="$ORIGINAL_AUTOTEST_CASE_DIR/$error_handler_value"
    if [ ! -f "$AUTOTEST_CASE_NAME" ];then
        TFerror "errorHandler $AUTOTEST_CASE_NAME not found!"
    fi
    if [ ! -x "$AUTOTEST_CASE_NAME" ];then
        TFerror "handler $AUTOTEST_CASE_NAME has no x previledge."
    fi
    $AUTOTEST_MODULES_DIR/builtin_mo $CASE_KIND $IN_ERROR_HANDLER
}
#cannot export TFerror, rely on errorHandler
function TFerror
{
    if [ "$IN_ERROR_HANDLER" == "NO" -a "$ERROR_HANDLE" == "ON" ];then
        echo "$AUTOTEST_MSG_TOKEN ERROR: $1"
        echo "$AUTOTEST_MSG_TOKEN NOTE: try to find errorHandler..."
        errorHandler
    elif [ "$ERROR_HANDLE" == "ON" ];then
        echo "$AUTOTEST_MSG_TOKEN errorHandler: $1"
    else
        echo "$AUTOTEST_MSG_TOKEN ERROR: $1"
    fi
    exit 1
}
function checkRC
{
    rc=$1
    running=$2
    if [ $rc -ne 0 ];then
        TFerror "$running failed with return value: $rc"
    fi
}
function runCMD
{
	eval $@ >/dev/null 2>&1
	rc=$?
	if [ $rc -ne 0 ];then
        TFerror "$@ failed with $rc"
	fi
}
function clearEnvVar
{
    unset LAB
    unset SUBSYSTEM
    unset SCRIPT_HOME
    unset FEATURE_ID
    unset TO_EMAIL
    unset MYNODE
    unset OPTNODE
    unset BE_USER
    unset BE_SERVER
    unset LOAD
    unset PROJECT
    unset SPDIR
}
#function area end

#get VIP from Jenkins before source user defined one
#user may set VIP in parameter file
export AUTOTEST_VIP="$VIP"

clearEnvVar
#export user defined enviroment variables
if [ ! -f "$AUTOTEST_PARAMETER_FILE" ];then
    TFerror "parameter file not found: $AUTOTEST_PARAMETER_FILE"
else
    set -a
	source $AUTOTEST_PARAMETER_FILE
    set +a
fi

CHECK_SSHLAB_FLAG="FALSE"
CHECK_BS_FLAG="FALSE"
CHECK_BUILD_FLAG="FALSE"
CHECK_BUILDS_FLAG="FALSE"
CHECK_KW_FLAG="FALSE"
CHECK_REPORT_FLAG="FALSE"
CHECK_GCOV_FLAG="FALSE"

export AUTOTEST_LAB="$LAB"
export AUTOTEST_LABNAME="$LAB"
#check user defined LAB
if [ "$AUTOTEST_LAB" == "no" -o "$AUTOTEST_LAB" == "NO" ];then
    TFnote "You disabled LAB access in $AUTOTEST_PARAMETER_FILE"
else
    if [ -n "$AUTOTEST_VIP" ];then
        TFnote "LAB ($AUTOTEST_LAB) will replaced by Jenkins VIP ($AUTOTEST_VIP)"
        AUTOTEST_LAB="$AUTOTEST_VIP"
    else
        if [ -n "$USER_DEFINED_IP" ];then
            case $USER_DEFINED_IP in
                y*|Y*)
                    if [ -z "$VIP" ];then
                        TFerror "You set USER_DEFINED_IP=${USER_DEFINED_IP} but you did not set VIP in $AUTOTEST_PARAMETER_FILE"
                    fi
                    TFnote "You set USER_DEFINED_IP=${USER_DEFINED_IP} so STF will use $VIP relace LAB name."
                    AUTOTEST_VIP="$VIP"
                    AUTOTEST_LAB="$VIP"
                    ;;
                n*|N*)
                    if [ -z "$AUTOTEST_LAB" ];then
                        TFerror "You set USER_DEFINED_IP=${USER_DEFINED_IP} but you did not set LAB in $AUTOTEST_PARAMETER_FILE"
                    fi
                    TFnote "You set USER_DEFINED_IP=${USER_DEFINED_IP} so STF will use $AUTOTEST_LAB as LAB name."
                    ;;
                *)
                    TFerror "You set USER_DEFINED_IP=${USER_DEFINED_IP} while ${USER_DEFINED_IP} is not supported."
                    ;;
            esac
        else
            if [ -z "$AUTOTEST_LAB" ];then
                TFnote "You did not set USER_DEFINED_IP and you did not set LAB in $AUTOTEST_PARAMETER_FILE"
            else
                TFnote "You did not set USER_DEFINED_IP so STF will use $AUTOTEST_LAB as LAB name."
            fi
        fi
    fi
fi

#check user defined SUBSYSTEM
if [ -z "$SUBSYSTEM" ];then
    TFerror "SUBSYSTEM env should not be empty. May be you forgot to set SUBSYSTEM in $AUTOTEST_PARAMETER_FILE ?"
else
    if [ "$SUBSYSTEM" != "$SUBMODULE" ];then
        TFerror "SUBSYSTEM is $SUBSYSTEM in $AUTOTEST_PARAMETER_FILE whereas it is $SUBMODULE in parameter file name."
	fi
fi

SUB_DIR="$AUTOTEST_CASE_DIR/$SUBSYSTEM"
if [ ! -d "$SUB_DIR" ];then
    TFerror "$SUB_DIR not found."
fi

#check user defined SCRIPT_HOME
if [ -z "$SCRIPT_HOME" ];then
    TFerror "SCRIPT_HOME env should not be empty. May be you forgot to set SCRIPT_HOME in $AUTOTEST_PARAMETER_FILE ?"
else
    if [ `dirname $SCRIPT_HOME` != `dirname $SUB_DIR` -o `basename $SCRIPT_HOME` != `basename $SUB_DIR` ];then
        TFerror "SCRIPT_HOME not correct: $SCRIPT_HOME (candidate is : $SUB_DIR). May be you setup a wrong SCRIPT_HOME in $AUTOTEST_PARAMETER_FILE ?"
    fi
fi

#check user defined FEATURE_ID and README file.
REPORT_SUFFIX="$AUTOTEST_JENKINS_JOB"
if [[ -z "$FEATURE_ID" && "$AUTOTEST_TEST_KIND" != "RT" && "$AUTOTEST_TEST_KIND" != "CIT" ]];then
    TFerror "FEATURE_ID env should not be empty when it is not regression test. May be you forgot to set FEATURE_ID in $AUTOTEST_PARAMETER_FILE ?"
else
    if [[ "$AUTOTEST_TEST_KIND" != "RT" && "$AUTOTEST_TEST_KIND" != "CIT" ]];then
		if [ ! -f "$SUB_DIR/$FEATURE_ID/README" ];then
            TFerror "README file not found in $SUB_DIR/$FEATURE_ID."
		else
			AUTOTEST_CASE_DIR="$SUB_DIR/$FEATURE_ID"
			REPORT_SUFFIX="${REPORT_SUFFIX}_${FEATURE_ID}"
			export AUTOTEST_FEATURE_ID="$FEATURE_ID"
		fi
	else
		if [ ! -f "$SUB_DIR/README" ];then
            TFerror "README file not found in $SUB_DIR."
		else
			AUTOTEST_CASE_DIR="$SUB_DIR"
			unset FEATURE_ID
		fi
	fi
fi

if [ ! -r $AUTOTEST_CASE_DIR ];then
    TFerror "$AUTOTEST_CASE_DIR has no read privilege to $USER."
fi
if [ ! -x $AUTOTEST_CASE_DIR ];then
    TFerror "$AUTOTEST_CASE_DIR has no execute privilege to $USER."
fi
# because we get feature id here.
AUTOTEST_REPORT_HTML="$AUTOTEST_BASE_DIR/Report/$REPORT_SUFFIX.html"
AUTOTEST_REPORT_FILE="$AUTOTEST_BASE_DIR/Report/$REPORT_SUFFIX.result"
AUTOTEST_KW_HTML="$AUTOTEST_BASE_DIR/Report/${REPORT_SUFFIX}_KW.html"
AUTOTEST_KW_WAIVER="$AUTOTEST_BASE_DIR/Report/${REPORT_SUFFIX}_KW.waiver"
AUTOTEST_GCOV_HTML="$AUTOTEST_BASE_DIR/Report/gcov_common/${REPORT_SUFFIX}"
AUTOTEST_GCOV_WAIVER="$AUTOTEST_BASE_DIR/Report/gcov_common/${REPORT_SUFFIX}.waiver"
AUTOTEST_BASE_URL="http://server.com/~csfdev/csf/auto/Report"
AUTOTEST_GCOV_URL="$AUTOTEST_BASE_URL/gcov_common/${REPORT_SUFFIX}"
#get the real html report file
if [ "$USER" != "$AUTOTEST_OFFICIAL_USER" ];then
    TFnote "You are execute $0 out of Jenkins, will change your report directory..."
	AUTOTEST_REPORT_HTML="$AUTOTEST_CASE_DIR/$REPORT_SUFFIX.html"
	AUTOTEST_REPORT_FILE="$AUTOTEST_CASE_DIR/$REPORT_SUFFIX.result"
    AUTOTEST_KW_HTML="$AUTOTEST_CASE_DIR/${REPORT_SUFFIX}_KW.html"
    AUTOTEST_KW_WAIVER="$AUTOTEST_CASE_DIR/${REPORT_SUFFIX}_KW.waiver"
    AUTOTEST_GCOV_HTML="$AUTOTEST_CASE_DIR/gcov_common/"
    AUTOTEST_GCOV_WAIVER="$AUTOTEST_CASE_DIR/gcov_common.waiver"
    AUTOTEST_BASE_URL="http://server.com/~csfdev/csf/auto/$AUTOTEST_TEST_KIND/$SUBSYSTEM/$AUTOTEST_FEATURE_ID"
    AUTOTEST_GCOV_URL="$AUTOTEST_BASE_URL/gcov_common"
fi
export AUTOTEST_GCOV_WAIVER
export AUTOTEST_KW_WAIVER
AUTOTEST_REPORT_URL="$AUTOTEST_BASE_URL/$REPORT_SUFFIX.html"
AUTOTEST_KW_URL="$AUTOTEST_BASE_URL/${REPORT_SUFFIX}_KW.html"


#get the readme file for current running Jenkins job.
#check AUTOTEST_README_FILE begin
AUTOTEST_README_FILE="$AUTOTEST_CASE_DIR/README"
if [ ! -r $AUTOTEST_README_FILE ];then
    TFerror "$USER has no read privilege on $AUTOTEST_README_FILE."
fi
export AUTOTEST_README_FILE
#check AUTOTEST_README_FILE end

#check AUTOTEST_REPORT_FILE begin
if [ ! -f $AUTOTEST_REPORT_FILE ];then
	touch $AUTOTEST_REPORT_FILE >/dev/null
	if [ $? -ne 0 ];then
        TFerror "$AUTOTEST_REPORT_FILE need to be created first to store the report original data, But $USER try to create it failed due to privilege or other issues."
	fi
fi
if [ ! -r $AUTOTEST_REPORT_FILE ];then
    TFerror "$USER has no read privilege on $AUTOTEST_REPORT_FILE."
fi
if [ ! -w $AUTOTEST_REPORT_FILE ];then
    TFerror "$USER has no write privilege on $AUTOTEST_REPORT_FILE."
fi
export AUTOTEST_REPORT_FILE
#check AUTOTEST_REPORT_FILE end

#check AUTOTEST_REPORT_HTML begin
if [ ! -f $AUTOTEST_REPORT_HTML ];then
		touch $AUTOTEST_REPORT_HTML >/dev/null
		if [ $? -ne 0 ];then
            TFerror "$AUTOTEST_REPORT_HTML need to be created first to store the report html data, but $USER try to create it failed due to privilege or other issues."
		fi
fi

if [ ! -r $AUTOTEST_REPORT_HTML ];then
    TFerror "$USER has no read privilege on $AUTOTEST_REPORT_HTML."
fi
if [ ! -w $AUTOTEST_REPORT_HTML ];then
    TFerror "$USER has no write privilege on $AUTOTEST_REPORT_HTML."
fi
export AUTOTEST_REPORT_HTML
#check AUTOTEST_REPORT_HTML end

#check user defined TO_EMAIL
if [ "$AUTOTEST_TEST_KIND" != "CIT" ];then
    if [ -z "$TO_EMAIL" ];then
        TFerror "TO_EMAIL env should not be empty. May be you forgot to set TO_EMAIL in $AUTOTEST_PARAMETER_FILE ?"
    else
        COMPANY_DOMAIN=`echo $TO_EMAIL |gawk -F '@' '{print $2}'`
        if ! contains "$COMPANY_DOMAIN" ".com";then
            TFerror "TO_EMAIL env not correct: $TO_EMAIL. May be you setup a wrong TO_EMAIL in $AUTOTEST_PARAMETER_FILE ?"
        fi
    fi
fi
ORIGINAL_AUTOTEST_CASE_DIR="$AUTOTEST_CASE_DIR"

#iterator case group to do pre check
ARG_ITERATOR=1
runCMD cd $ORIGINAL_AUTOTEST_CASE_DIR
GROUP_NUM=`ls -d $GROUP_PREFIX[0-9]*_*[!_] 2>/dev/null |wc -l`
MAX_GROUP_NUM=0
if [ $GROUP_NUM -eq 0 ];then
    TFnote "no group cases founded."
else
    MAX_GROUP_NUM=$(ls -d $GROUP_PREFIX[0-9]*_*[!_] 2>/dev/null | gawk -F '_' '{print $1}' | sed "s/$GROUP_PREFIX//g" | sort -nr | head -1 )
    if [ $MAX_GROUP_NUM -gt $CONST_MAX_GROUP_NUM ];then
        TFerror "case numbers overflow (limit:$CONST_MAX_GROUP_NUM): $MAX_GROUP_NUM"
    fi
fi

TFnote "Start STF coding standard audit to make sure the user cases are following it..."
$AUTOTEST_MODULES_DIR/STFStandardCheck.py $ORIGINAL_AUTOTEST_CASE_DIR
checkRC $? "$AUTOTEST_MODULES_DIR/STFStandardCheck $ORIGINAL_AUTOTEST_CASE_DIR"

#check the legacy workaound
NumCP=$(ls -l $ORIGINAL_AUTOTEST_CASE_DIR/CP_* 2>/dev/null |wc -l 2>/dev/null)
[ $NumCP -ne 0 ] && TFerror "CP_* is a keyword in STF, please delete CP_RELAY or other CP_* files in $ORIGINAL_AUTOTEST_CASE_DIR"

function kwExec
{
    ssh $AUTOTEST_SSH_ARGS -tt $BE_USER@$BE_SERVER "export AUTOTEST_KW_MONITOR=$AUTOTEST_KW_MONITOR;$AUTOTEST_MODULES_DIR/build_mo $AUTOTEST_MODULES_DIR/klocwork_mo $AUTOTEST_PARAMETER_FILE" 2>&1| tee $AUTOTEST_STDOUT_MONITOR
    checkRC $? "ssh remote execute $AUTOTEST_MODULES_DIR/klocwork_mo"
    TFnote "kw2html $AUTOTEST_KW_MONITOR $AUTOTEST_KW_HTML"
    $AUTOTEST_MODULES_DIR/kw2html.py $AUTOTEST_KW_MONITOR $AUTOTEST_KW_HTML
    return $?
}
#check KW_MODE first
if [ -n "$KW_MODE" ];then
    kw_mode_lower=$(echo $KW_MODE |tr '[:upper:]' '[:lower:]')
    case $kw_mode_lower in
        only|pre|post)
            CHECK_KW_FLAG="TRUE"
            CHECK_BUILD_FLAG="TRUE"
            CHECK_BUILDS_FLAG="TRUE"
            CHECK_BS_FLAG="TRUE"
            ;;
        off)
            CHECK_KW_FLAG="FALSE"
            ;;
        *)
            TFerror "KW_MODE (was set to $KW_MODE in $AUTOTEST_PARAMETER_FILE) can only be ONLY,PRE,POST,OFF"
            ;;
    esac

    if [ "$CHECK_KW_FLAG" == "TRUE" ];then
        export AUTOTEST_KW_MONITOR="/u/$BE_USER/.STF/kw_monitor4${ARG}.$$"
        #check AUTOTEST_KW_HTML begin
        if [ ! -f $AUTOTEST_KW_HTML ];then
                touch $AUTOTEST_KW_HTML >/dev/null
                if [ $? -ne 0 ];then
                    TFerror "$AUTOTEST_KW_HTML need to be created first to store klocwork report html data, but $USER try to create it failed due to privilege or other issues."
                fi
        fi

        if [ ! -r $AUTOTEST_KW_HTML ];then
            TFerror "$USER has no read privilege on $AUTOTEST_KW_HTML."
        fi
        if [ ! -w $AUTOTEST_KW_HTML ];then
            TFerror "$USER has no write privilege on $AUTOTEST_KW_HTML."
        fi
        export AUTOTEST_KW_HTML
        #check AUTOTEST_KW_HTML end
    fi
    if [ "$kw_mode_lower" == "only" ];then
        $AUTOTEST_MODULES_DIR/buildserver_check_mo
        checkRC $? "$AUTOTEST_MODULES_DIR/buildserver_check_mo"
        $AUTOTEST_MODULES_DIR/build_check_mo
        checkRC $? "$AUTOTEST_MODULES_DIR/build_check_mo"
        kwExec
        exit $?
    fi
fi

if [ -n "$GCOV_MODE" ];then
    gcov_mode_lower=$(echo $GCOV_MODE |tr '[:upper:]' '[:lower:]')
    case $gcov_mode_lower in
        module|feature|raw)
            CHECK_GCOV_FLAG="TRUE"
            CHECK_BUILD_FLAG="TRUE"
            CHECK_BUILDS_FLAG="TRUE"
            CHECK_BS_FLAG="TRUE"
            export AUTOTEST_GCOV_HTML
            export AUTOTEST_GCOV_URL
            if [ -n "$GCOV_CROSS_SPA" ];then
                CHECK_SSHLAB_FLAG="TRUE"
            fi
            ;;
        off)
            CHECK_GCOV_FLAG="FALSE"
            ;;
        *)
            TFerror "GCOV_MODE value illegal in $AUTOTEST_PARAMETER_FILE: $GCOV_MODE"
            ;;
    esac
fi
CURRENT_DATE_TIME=`date 2>/dev/null`
checkRC $? date
echo "************************$CURRENT_DATE_TIME************************"> $AUTOTEST_REPORT_FILE

env |grep "^AUTOTEST_"
runCMD "> $AUTOTEST_VARS_FILE"
#check group's directory names
TFnote "GCASE_ID_FILTER filter value: $GCASE_ID_FILTER"
TFnote "GCASE_NAME_FILTER filter value: $GCASE_NAME_FILTER"
for GROUP_ID in {0..100};do
	if [ $GROUP_ID -ne 0 ];then
		runCMD cd $ORIGINAL_AUTOTEST_CASE_DIR
		if [ $GROUP_ID -gt $MAX_GROUP_NUM -o $MAX_GROUP_NUM -eq 0 ];then
			break
		fi
		if [ $GROUP_ID -gt $CONST_MAX_GROUP_NUM ];then
            TFerror "case group directory name has unknown error."
		fi

		TMPCOUNT=`ls -d ${GROUP_PREFIX}${GROUP_ID}_*[!_] 2>/dev/null |wc -l 2>/dev/null`
		if [ $TMPCOUNT -gt 1 ];then
            TFerror "there have more than one ${GROUP_PREFIX}${GROUP_ID}_*[!_] in $ORIGINAL_AUTOTEST_CASE_DIR"
		fi

		TMP_DIR_NAME=`ls -d ${GROUP_PREFIX}${GROUP_ID}_*[!_] 2>/dev/null`

		if [ -z "$TMP_DIR_NAME" ];then
			continue
		fi
        #filter GCASE_ID_FILTER begin
        if [ ! -z "$GCASE_ID_FILTER" ];then
            echo "$GROUP_ID" |grep -E "$GCASE_ID_FILTER" 2>&1 >/dev/null
            if [ $? -ne 0 ];then
                TFnote "group case $GROUP_ID ($TMP_DIR_NAME) is not chosen by GCASE_ID_FILTER ($GCASE_ID_FILTER), omit precheck..."
                continue
            fi
        fi
        #filter end
        #filter GCASE_NAME_FILTER begin
        if [ ! -z "$GCASE_NAME_FILTER" ];then
            echo $TMP_DIR_NAME | awk -F '_' '{print $2}' |grep -E "$GCASE_NAME_FILTER" 2>&1 >/dev/null
            if [ $? -ne 0 ];then
                TFnote "group case $GROUP_ID ($TMP_DIR_NAME) is not chosen by GCASE_NAME_FILTER ($GCASE_NAME_FILTER), omit precheck..."
                continue
            fi
        fi
        #filter end
		AUTOTEST_CASE_DIR="$ORIGINAL_AUTOTEST_CASE_DIR/$TMP_DIR_NAME"
	fi

	#change PWD
    TFnote "$0 enter into $AUTOTEST_CASE_DIR to do precheck..."
	runCMD cd $AUTOTEST_CASE_DIR

	CASE_NUM=`ls $CASE_PREFIX[0-9]*_*_*[!_] 2>/dev/null |wc -l`
	if [ $CASE_NUM -eq 0 ];then
		if [ $GROUP_NUM -eq 0 ];then
            TFerror "$AUTOTEST_CASE_DIR has no cases and group cases."
		else
            TFnote "$AUTOTEST_CASE_DIR has no regular cases."
			continue
		fi
	fi

    MAX_CASE_NUM=$(ls $CASE_PREFIX[0-9]*_*_*[!_] 2>/dev/null | gawk -F '_' '{print $1}' | sed "s/$CASE_PREFIX//g" | sort -nr | head -1 )
    if [ $MAX_CASE_NUM -gt $CONST_MAX_CASE_NUM ];then
        TFerror "case numbers overflow (limit:$CONST_MAX_CASE_NUM): $MAX_CASE_NUM"
    fi

	#check case's file names
    for CASE_ID in {1..100};do
        if [ $CASE_ID -gt $MAX_CASE_NUM ];then
			break
		fi
		if [ $CASE_ID -gt $CONST_MAX_CASE_NUM ];then
            TFerror "cases file name have unknown error."
		fi

        TMPCOUNT=$(ls ${CASE_PREFIX}${CASE_ID}_*_*[!_] 2>/dev/null |wc -l 2>/dev/null)
		if [ $TMPCOUNT -gt 1 ];then
            TFerror "there have more than one ${CASE_PREFIX}${CASE_ID}_*_*[!_] in $AUTOTEST_CASE_DIR"
		fi

        FILE_NAME=$(ls ${CASE_PREFIX}${CASE_ID}_*_*[!_] 2>/dev/null)

		if [ -z "$FILE_NAME" ];then
			continue
		fi
        export AUTOTEST_CASE_NAME="$AUTOTEST_CASE_DIR/$FILE_NAME"

        if [ ! -r "$AUTOTEST_CASE_NAME" ];then
            TFerror "case has no read privilege: $AUTOTEST_CASE_NAME"
		fi
        CASE_KIND=`echo $FILE_NAME |gawk -F '_' '{print $2}'`
        if [ -z "$CASE_KIND" ];then
            TFerror "$AUTOTEST_CASE_NAME file name format error!"
        fi
        case $CASE_KIND in
            local)
                if [ ! -x "$AUTOTEST_CASE_NAME" ];then
                    TFerror "case has no executable privilege: $AUTOTEST_CASE_NAME"
                fi
                ;;
            buildserver)
                if [ ! -x "$AUTOTEST_CASE_NAME" ];then
                    TFerror "case has no executable privilege: $AUTOTEST_CASE_NAME"
                fi
                CHECK_BS_FLAG="TRUE"
                ;;
            build)
                if [ ! -x "$AUTOTEST_CASE_NAME" ];then
                    TFerror "case has no executable privilege: $AUTOTEST_CASE_NAME"
                fi
                CHECK_BS_FLAG="TRUE"
                CHECK_BUILD_FLAG="TRUE"
                ;;
            installspa|installconfig|installproc|deletespa|restartspa)   
                CHECK_SSHLAB_FLAG="TRUE"
                $AUTOTEST_MODULES_DIR/auditFulltar
                checkRC $? "$AUTOTEST_MODULES_DIR/auditFulltar"
                ;;
            rcvspa|rcvplat)
                CHECK_SSHLAB_FLAG="TRUE"
                $AUTOTEST_MODULES_DIR/auditRcvtext
                checkRC $? "$AUTOTEST_MODULES_DIR/auditRcvtext"
                ;;
            onlab)
                if [ ! -x "$AUTOTEST_CASE_NAME" ];then
                    TFerror "case has no executable privilege: $AUTOTEST_CASE_NAME"
                fi
                CHECK_SSHLAB_FLAG="TRUE"
                ;;
            onlab~[a-zA-Z0-9]*~[a-zA-Z0-9]*)
                $AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND jumphost precheck
                checkRC $? "$AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND jumphost precheck"
                ;;
            onlab~[a-zA-Z0-9]*)
                $AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND host precheck
                checkRC $? "$AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND host precheck"
                ;;
            fromlab~[a-zA-Z0-9]*~[a-zA-Z0-9]*)
                $AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND jumphost precheck
                checkRC $? "$AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND jumphost precheck"
                ${AUTOTEST_MODULES_DIR}/fromlab_check_mo
                checkRC $? "${AUTOTEST_MODULES_DIR}/fromlab_check_mo"
                ;;
            fromlab~[a-zA-Z0-9]*)
                $AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND host precheck
                checkRC $? "$AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND host precheck"
                ${AUTOTEST_MODULES_DIR}/fromlab_check_mo
                checkRC $? "${AUTOTEST_MODULES_DIR}/fromlab_check_mo"
                ;;
            tolab~[a-zA-Z0-9]*~[a-zA-Z0-9]*)
                $AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND jumphost precheck
                checkRC $? "$AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND jumphost precheck"
                ${AUTOTEST_MODULES_DIR}/tolab_check_mo
                checkRC $? "${AUTOTEST_MODULES_DIR}/tolab_check_mo"
                ;;
            tolab~[a-zA-Z0-9]*)
                $AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND host precheck
                checkRC $? "$AUTOTEST_FRAMEWORK_DIR/helper/onlabModuleHelper $CASE_KIND host precheck"
                ${AUTOTEST_MODULES_DIR}/tolab_check_mo
                checkRC $? "${AUTOTEST_MODULES_DIR}/tolab_check_mo"
                ;;
            *)
                CHECK_MODULE="${AUTOTEST_MODULES_DIR}/${CASE_KIND}_check_mo"
                EXEC_MODULE="${AUTOTEST_MODULES_DIR}/${CASE_KIND}_exec_mo"
                if [ ! -f "$EXEC_MODULE" ];then
                    missModules
                    TFerror "No module to support $AUTOTEST_CASE_NAME ($EXEC_MODULE missed) !"
                fi
                if [ ! -x "$EXEC_MODULE" ];then
                    TFerror "Module ($EXEC_MODULE) has no x previledge to execute $AUTOTEST_CASE_NAME !"
                fi
                if [ ! -f "$CHECK_MODULE" ];then
                    TFnote "No module to check the syntax of $AUTOTEST_CASE_NAME ($CHECK_MODULE missed) !"
                    continue
                fi
                if [ ! -x "$CHECK_MODULE" ];then
                    TFerror "Module ($CHECK_MODULE) has no x previledge to execute $AUTOTEST_CASE_NAME !"
                fi
                TFnote "Load module $CHECK_MODULE ..."
                $CHECK_MODULE
                checkRC $? "$CHECK_MODULE check syntax of $AUTOTEST_CASE_NAME "
                ;;
        esac
	done
done
#check the ssh connection to LAB
if [ "$CHECK_SSHLAB_FLAG" == "TRUE" ];then
    for LAB_USER in "root";do
        ssh $AUTOTEST_SSH_ARGS -n $LAB_USER@$AUTOTEST_LAB ". /etc/profile"
        if [ $? -ne 0 ];then
            echo "Potential reason:"
            echo "1, the network to $AUTOTEST_LAB has issues."
            echo "2, You may forgot to add $USER public key to ~$LAB_USER/.ssh/authorized_keys on $AUTOTEST_LAB"
            echo "Jenkins ssh public key: $AUTOTEST_JENKINS_PUBKEY"
            echo "3, $AUTOTEST_LAB is down."
            echo "4, did not configure PubkeyAuthentication = yes in /etc/ssh/sshd_config on $AUTOTEST_LAB"
            echo "5, Other reasons."
            TFerror "cannot login $LAB_USER@$AUTOTEST_LAB"
        fi
    done
fi
if [ "$CHECK_BS_FLAG" == "TRUE" ];then
    $AUTOTEST_MODULES_DIR/buildserver_check_mo
    checkRC $? "$AUTOTEST_MODULES_DIR/buildserver_check_mo"
fi
if [ "$CHECK_BUILD_FLAG" == "TRUE" ];then
    $AUTOTEST_MODULES_DIR/build_check_mo
    checkRC $? "$AUTOTEST_MODULES_DIR/build_check_mo"
fi
if [ "$CHECK_BUILDS_FLAG" == "TRUE" ];then
    $AUTOTEST_MODULES_DIR/build_strict_check_mo
    checkRC $? "$AUTOTEST_MODULES_DIR/build_strict_check_mo"
fi
if [ "$CHECK_KW_FLAG" == "TRUE" ];then
    if [ "$kw_mode_lower" == "post" ];then
        ssh $AUTOTEST_SSH_ARGS -tt $BE_USER@$BE_SERVER ". /etc/profile; . ~/.profile; set -a; . $AUTOTEST_PARAMETER_FILE; set +a; export AUTOTEST_KW_MONITOR=$AUTOTEST_KW_MONITOR;$AUTOTEST_MODULES_DIR/klocwork_mo check" 2>&1
        checkRC $? "$AUTOTEST_MODULES_DIR/klocwork_mo check"
    elif [ "$kw_mode_lower" == "pre" ];then
        kwExec
    else
        TFerror "$0 met an internal error. checkpoint 7030, contact Gemfield."
    fi
fi
TFnote "###################################################precheck end#######################################################"
$AUTOTEST_MODULES_DIR/pre_task
checkRC $? "$AUTOTEST_MODULES_DIR/pre_task"
ERROR_HANDLE="ON"
AUTOTEST_CASE_DIR="$ORIGINAL_AUTOTEST_CASE_DIR"
#iterator case group to do real execution
#check group's directory names and execute it

for GROUP_ID in {0..100};do
	if [ $GROUP_ID -ne 0 ];then
		runCMD cd $ORIGINAL_AUTOTEST_CASE_DIR
		[ $GROUP_ID -gt $MAX_GROUP_NUM -o $MAX_GROUP_NUM -eq 0 ] && break
		[ $GROUP_ID -gt $CONST_MAX_GROUP_NUM ] && TFerror "case group directory name has unknown error."

		TMPCOUNT=`ls -d ${GROUP_PREFIX}${GROUP_ID}_*[!_] 2>/dev/null |wc -l 2>/dev/null`
		[ $TMPCOUNT -gt 1 ] && TFerror "there have more than one ${GROUP_PREFIX}${GROUP_ID}_*[!_] in $ORIGINAL_AUTOTEST_CASE_DIR"

		TMP_DIR_NAME=`ls -d ${GROUP_PREFIX}${GROUP_ID}_*[!_] 2>/dev/null`

		[ -z "$TMP_DIR_NAME" ] && continue
        #filter GCASE_ID_FILTER begin
        if [ ! -z "$GCASE_ID_FILTER" ];then
            echo "$GROUP_ID" |grep -E "$GCASE_ID_FILTER" 2>&1 >/dev/null
            if [ $? -ne 0 ];then
                TFnote "group case $GROUP_ID ($TMP_DIR_NAME) is not chosen by GCASE_ID_FILTER ($GCASE_ID_FILTER), omit run..."
                continue
            fi
        fi
        #filter end
        #filter GCASE_NAME_FILTER begin
        if [ ! -z "$GCASE_NAME_FILTER" ];then
            echo $TMP_DIR_NAME | awk -F '_' '{print $2}' |grep -E "$GCASE_NAME_FILTER" 2>&1 >/dev/null
            if [ $? -ne 0 ];then
                TFnote "group case $GROUP_ID ($TMP_DIR_NAME) is not chosen by GCASE_NAME_FILTER ($GCASE_NAME_FILTER), omit run..."
                continue
            fi
        fi
        #filter end
		AUTOTEST_CASE_DIR="$ORIGINAL_AUTOTEST_CASE_DIR/$TMP_DIR_NAME"
	fi

	#change PWD
    TFnote "$0 enter into $AUTOTEST_CASE_DIR to run the cases..."
	runCMD cd $AUTOTEST_CASE_DIR

	#execute cases from s1_*_* to sN_*_*
    CASE_NUM=`ls $CASE_PREFIX[0-9]*_*_*[!_] 2>/dev/null |wc -l`
    if [ $CASE_NUM -eq 0 ];then
        if [ $GROUP_NUM -eq 0 ];then
            TFerror "$AUTOTEST_CASE_DIR has no cases and group cases."
        else
            TFnote "$AUTOTEST_CASE_DIR has no regular cases."
            continue
        fi
    fi

    MAX_CASE_NUM=$(ls $CASE_PREFIX[0-9]*_*_*[!_] 2>/dev/null | gawk -F '_' '{print $1}' | sed "s/$CASE_PREFIX//g" | sort -nr | head -1 )
    [ $MAX_CASE_NUM -gt $CONST_MAX_CASE_NUM ] && TFerror "case numbers overflow (limit:$CONST_MAX_CASE_NUM): $MAX_CASE_NUM"
    
    CHECK_REPORT_FLAG="TRUE"
    for CASE_ID in {1..100};do
        [ $CASE_ID -gt $MAX_CASE_NUM ] && break

		[ $CASE_ID -gt $CONST_MAX_CASE_NUM ] && TFerror "cases file name have unknown error."

        FILE_NAME=$(ls ${CASE_PREFIX}${CASE_ID}_*_*[!_] 2>/dev/null)
		[ -z "$FILE_NAME" ] && continue
		
        AUTOTEST_CASE_NAME="$AUTOTEST_CASE_DIR/$FILE_NAME"

		CASE_KIND=`echo $FILE_NAME |gawk -F '_' '{print $2}'`
        TFnote "will run $AUTOTEST_CASE_NAME"
        $AUTOTEST_MODULES_DIR/builtin_mo $CASE_KIND $IN_ERROR_HANDLER
        checkRC $? "$AUTOTEST_CASE_NAME"
        TFnote "$AUTOTEST_CASE_NAME succeed."
	done
    TFnote "$SUBSYSTEM $FEATURE_ID $AUTOTEST_TEST_KIND $AUTOTEST_CASE_DIR succeed."
done
#disable error handler here
ERROR_HANDLE="OFF"
#klocwork scan
[ "$kw_mode_lower" == "post" ] && kwExec

$AUTOTEST_MODULES_DIR/post_task
checkRC $? "$AUTOTEST_MODULES_DIR/post_task"

#tell jenkins we succeed.
exit 0

